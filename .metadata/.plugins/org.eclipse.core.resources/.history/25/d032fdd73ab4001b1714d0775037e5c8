#include "bibliotecaUTN-validaciones.h"
#include "eRecaudacion.h"

// PRINTF ARRAY SPACE
int w[MAX_COL] = {15, 15, 15, 15, 15};

// ID
int idRecaudacion = 100;
void setIdRecaudacion(int* id)
{
	*id = idRecaudacion++;
}

// INIT ESTRUCTURA
int initRecaudacion(eRecaudacion* eArr, int largoArr)
{
	int exitoFuncion = -1;
	eRecaudacion recaudacionNueva;
	if(eArr != NULL && largoArr > 0)
	{
		int i;
		for(i = 0; i < largoArr; i++)
		{
			eArr[i] = recaudacionNueva;
			eArr[i].isEmpty = 1;
		}
		exitoFuncion = 0;
	}
	return exitoFuncion;
}

// ADD
int searchEmptyRecaudacion(eRecaudacion* eArr, int largoArr, int* posLibre)
{
	int exitoFuncion = -1;

	if(eArr != NULL && largoArr > 0)
	{
		int i;
		for(i = 0; i < largoArr; i++)
		{
			if(eArr[i].isEmpty == 1)
			{
				*posLibre = i;
				exitoFuncion = 0;
				break;
			}
		}

		if(exitoFuncion == -1)
		{
			*posLibre = -1;
		}
	}
	return exitoFuncion;
}

int addRecaudacion(eRecaudacion* eArr, int largoArr, int id, char* nombre, char* apellido, int cuil, int posLibre)
{
	int exitoFuncion = -1;
	if(eArr != NULL && largoArr > 0)
	{
		eArr[posLibre].id = id;
		strcpy(eArr[posLibre].nombre, nombre);
		strcpy(eArr[posLibre].apellido, apellido);
		eArr[posLibre].cuil = cuil;
		eArr[posLibre].isEmpty = 0;
		exitoFuncion = 0;
	}

	return exitoFuncion;
}


int altaRecaudacion(eContribuyente* eArr, int largoArr, int* existenciaProxLibre)
{
	int exitoFuncion = -1;
	int posLibre;
	int auxProxLibre = *existenciaProxLibre;
	int exito = searchEmptyContribuyente(eArr, largoArr, &posLibre);

	if(exito == 0)
	{
		// Variable datos
		char nombre[MAX_CHAR];
		char apellido[MAX_CHAR];
		int cuil;

		if(utn_getStringLimited(nombre, "\nIngrese el nombre del contribuyente: ", "-- Error de carga. ", MAX_CHAR, MAX_ERRORES) == 0 &&
		utn_getStringLimited(apellido, "Ingrese el apellido del contribuyente: ", "-- Error de carga. ", MAX_CHAR, MAX_ERRORES) == 0 &&
		utn_getNumber(&cuil, "Ingrese el cuil del contribuyente: ", "-- Error de carga. ", MAX_ERRORES) == 0)
		{
			int id;
			setIdContribuyente(&id);
			exito = addContribuyente(eArr, largoArr, id, nombre, apellido, cuil, posLibre);
			exitoFuncion = 0;
		}
		else
		{
			exito = -1;
		}

		searchEmptyContribuyente(eArr, largoArr, &auxProxLibre);
		if(auxProxLibre == -1)
		{
			*existenciaProxLibre = auxProxLibre;
		}
	}

	if(exito != 0)
	{
		printf("---- ERROR AL INGRESAR CONTRIBUYENTE ----");
	}

	return exitoFuncion;
}
















