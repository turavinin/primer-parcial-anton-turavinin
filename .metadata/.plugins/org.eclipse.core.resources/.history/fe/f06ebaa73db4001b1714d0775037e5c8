#include "bibliotecaUTN-validaciones.h"
#include "eRecaudacion.h"
#include "eContribuyente.h"

// PRINTF ARRAY SPACE
int w[MAX_COL] = {15, 15, 15, 15, 15};

// ID
int idRecaudacion = 100;
void setIdRecaudacion(int* id)
{
	*id = idRecaudacion++;
}

// INIT ESTRUCTURA
int initRecaudacion(eRecaudacion* eArr, int largoArr)
{
	int exitoFuncion = -1;
	eRecaudacion recaudacionNueva;
	if(eArr != NULL && largoArr > 0)
	{
		int i;
		for(i = 0; i < largoArr; i++)
		{
			eArr[i] = recaudacionNueva;
			eArr[i].isEmpty = 1;
		}
		exitoFuncion = 0;
	}
	return exitoFuncion;
}

// ADD
int searchEmptyRecaudacion(eRecaudacion* eArr, int largoArr, int* posLibre)
{
	int exitoFuncion = -1;

	if(eArr != NULL && largoArr > 0)
	{
		int i;
		for(i = 0; i < largoArr; i++)
		{
			if(eArr[i].isEmpty == 1)
			{
				*posLibre = i;
				exitoFuncion = 0;
				break;
			}
		}

		if(exitoFuncion == -1)
		{
			*posLibre = -1;
		}
	}
	return exitoFuncion;
}

int addRecaudacion(eRecaudacion* eArr, int largoArr, int id, int idContribuyente, int mes, int tipo, int posLibre)
{
	int exitoFuncion = -1;
	if(eArr != NULL && largoArr > 0)
	{
		eArr[posLibre].id = id;
		eArr[posLibre].idContribuyente = idContribuyente;
		eArr[posLibre].mes = mes;
		eArr[posLibre].tipo = tipo;
		eArr[posLibre].isEmpty = 0;
		exitoFuncion = 0;
	}

	return exitoFuncion;
}


int getIdContribuyente(eRecaudacion* eRecaudaArr, eContribuyente* eContriArr, int largoArr, int* idContri)
{
	int exitoFuncion = -1;
	int auxId = -1;

	if(eRecaudaArr != NULL && eContriArr != NULL && largoArr > 0)
	{
		int exito = utn_getNumber(&auxId, "Ingrese ID del contribuyente: ", "-- Error de carga. ", MAX_ERRORES);

		if(exito == 0)
		{
			int i;
			for(i = 0; i < largoArr; i++)
			{
				if(eContriArr[i].id == auxId)
				{
					*idContri = auxId;
					exitoFuncion = 0;
					break;
				}
			}

			if(auxId == -1)
			{
				printf("--- ¡NO SE ENCONTRO CONTRIBUYENTE! ---")
			}
		}
	}

	return exitoFuncion;
}

int altaRecaudacion(eRecaudacion* eArr, int largoArr, int* existenciaProxLibre)
{
	int exitoFuncion = -1;
	int posLibre;
	int auxProxLibre = *existenciaProxLibre;
	int exito = searchEmptyRecaudacion(eArr, largoArr, &posLibre);

	if(exito == 0)
	{
		// Variable datos
		int idContribuyente;
		int mes;
		int tipo;
		float importe;

		if(utn_getNumber(&idContribuyente, "Ingrese ID del contribuyente: ", "-- Error de carga. ", MAX_ERRORES) == 0 &&
		utn_getStringLimited(mes, "Ingrese mes: ", "-- Error de carga. ", MAX_CHAR, MAX_ERRORES) == 0 &&
		utn_getNumber(&cuil, "Ingrese el cuil del contribuyente: ", "-- Error de carga. ", MAX_ERRORES) == 0)
		{
			int id;
			setIdRecaudacion(&id);
			exito = addRecaudacion(eArr, largoArr, id, nombre, apellido, cuil, posLibre);
			exitoFuncion = 0;
		}
		else
		{
			exito = -1;
		}

		searchEmptyRecaudacion(eArr, largoArr, &auxProxLibre);
		if(auxProxLibre == -1)
		{
			*existenciaProxLibre = auxProxLibre;
		}
	}

	if(exito != 0)
	{
		printf("---- ERROR AL INGRESAR CONTRIBUYENTE ----");
	}

	return exitoFuncion;
}
















